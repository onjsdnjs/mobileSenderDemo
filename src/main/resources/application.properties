spring.datasource.url=jdbc:postgresql://localhost:5432/springboot
spring.datasource.username=postgres
spring.datasource.password=pass

spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create

# 콘솔에 sql 정리해서 보여줌
spring.jpa.properties.hibernate.format_sql=true
# JPA  데이터베이스 플랫폼을 지정
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# 콘솔에 sql 보여짐
spring.jpa.properties.hibernate.show_sql=true
# 콘솔에 출력되는 JPA 실행 쿼리를 가독성 있게 표현합니다
spring.jpa.properties..hibernate.format_sql=true

# postgresSQL을 사용하면 발생하는
# Caused by: java.sql.SQLFeatureNotSupportedException:
# Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented.라는
# createClob()메서드를 구현하지 않았다는 하이버네이트의 에러로그를 보여주지 않는 설정이다.
# (위의 설정을 사용하지 않아도, 테스트는 성공하지만 에러 로그가 보기 싫다면 추가해주자.)
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# 스프링부트의 Thymeleaf 템플릿 결과는 캐싱하는 것이 디폴트 값이다.
# 즉, 개발할 때 Thymeleaf를 수정하고 브라우저를 새로고침하면 바로 반영이 되지 않는다.
# 따라서 개발을 할 때에는 false로 해 주는 것이 재시작  없이 새로고침만으로 반영되게 하는 것이 편하다.
spring.thymeleaf.cache=false

# 빌드해도 서버 재시작하지 않고 뷰에서 변경된 데이터가 바로 보여짐
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true

# 스프링 부트의 설정이 아닌 스프링 프레임워크에서 빈을 등록하는 과정에서 발생하는 것으로 이에 대한 속성을 비활성화할 수 있는 기능을 제공한다.
spring.main.allow-bean-definition-overriding=true
